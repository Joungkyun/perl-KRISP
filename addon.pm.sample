
# -- joungkyun modificate $Id: addon.pm.sample,v 1.1 2010-06-20 18:33:36 oops Exp $ --
my $VERSION = '2.0.0';
my $UVERSION = '002000000';

my @KRISP_SEARCH_EX_KEY = (
	'ip', 'start', 'end', 'size', 'dummydata'
);

sub new {
	my $self = {};
	return bless $self;
}

sub mod_version {
	my $self = shift if ref ($_[0]);
	return $VERSION;
}

sub mod_uversion {
	my $self = shift if ref ($_[0]);
	return $UVERSION;
}

sub version {
	my $self = shift if ref ($_[0]);
	return KRISPc::version ();
}

sub uversion {
	my $self = shift if ref ($_[0]);
	return KRISPc::uversion ();
}

sub ip2long {
	my $self = shift if ref ($_[0]);
	my ($ipaddr) = @_;

	return KRISPc::kip2long ($ipaddr);
}

sub long2ip {
	my $self = shift if ref ($_[0]);
	my ($longip) = @_;

	my @ip = qw ( 0, 0, 0, 0 );
	my $i;

	for ( $i=3; $i>=0; $i-- ) {
		$ip[$i] = $longip % 256;
		$longip /= 256
	}

	return join '.' , @ip;
}

sub netmask {
	my $self = shift if ref ($_[0]);
	my ($start, $end) = @_;

	my $lstart = KRISPc::kip2long ($start);
	my $lend   = KRISPc::kip2long ($end);

	my $mask = KRISPc::knetmask ($lstart, $lend);

	return KRISP::long2ip ($mask);
}

sub mask2prefix {
	my $self = shift if ref ($_[0]);
	my ($mask) = @_;

	my $lmask = KRISPc::kip2long ($mask);
	return KRISPc::klong2prefix ($lmask);
}

sub prefix2mask {
	my $self = shift if ref ($_[0]);
	my ($prefix) = @_;

	my $lmask = KRISPc::kprefix2long ($prefix);
	return KRISP::long2ip ($lmask);
}

sub network {
	my $self = shift if ref ($_[0]);
	my ($ip, $mask) = @_;

	my $lip = KRISPc::kip2long ($ip);
	my $lmask = KRISPc::kip2long ($mask);

	return KRISP::long2ip (KRISPc::knetwork ($lip, $lmask));
}

sub broadcast {
	my $self = shift if ref ($_[0]);
	my ($ip, $mask) = @_;

	my $lip = KRISPc::kip2long ($ip);
	my $lmask = KRISPc::kip2long ($mask);

	return KRISP::long2ip (KRISPc::kbroadcast ($lip, $lmask));
}

sub open {
	my $self = shift if ref ($_[0]);
	my ($database, $err) = @_;

	return KRISPc::kopen ($database);
}

sub close {
	my $self = shift if ref ($_[0]);
	my ($handle) = @_;

	return KRISPc::kclose ($handle);
}

sub search_key {
	my $self = shift if ref ($_[0]);

	return qw (
		ip netmask start end icode iname ccode cname network broadcast
	);
}

sub search {
	my $self = shift if ref ($_[0]);
	my ($dbh, $host) = @_;
	my $v = undef;

	my $r = KRISPc::search ($dbh, $host);
	if ( $r->{'err'} ) {
		$_[2] = sprintf "kr_search:: %s", $r->{'err'};
		return undef;
	}

	foreach my $k (KRISP::search_key ()) {
		if ( $k eq 'netmask' or $k eq 'start' or $k eq 'end' ) {
			$v->{$k} = KRISP::long2ip ($r->{$k});
		} else {
			next if ( $k eq 'network' or $k eq 'broadcast' );
			$v->{$k} = $r->{$k};
		}
	}

	$v->{'network'} = KRISP::long2ip (KRISPc::knetwork ($r->{'start'}, $r->{'netmask'}));
	$v->{'broadcast'} = KRISP::long2ip (KRISPc::kbroadcast ($r->{'start'}, $r->{'netmask'}));

	#$v->{'ip'} = $r->swig_ip_get ();
	#$v->{'netmask'} = KRISP::long2ip ($r->swig_netmask_get ());
	#$v->{'network'} = KRISP::long2ip (KRISPc::knetwork ($r->swig_start_get (), $r->swig_netmask_get ()));
	#$v->{'broadcast'} = KRISP::long2ip (KRISPc::kbroadcast ($r->swig_start_get (), $r->swig_netmask_get ()));
	#$v->{'start'} = KRISP::long2ip ($r->swig_start_get ());
	#$v->{'end'} = KRISP::long2ip ($r->swig_end_get ());
	#$v->{'icode'} = $r->swig_icode_get ();
	#$v->{'iname'} = $r->swig_iname_get ();
	#$v->{'ccode'} = $r->swig_ccode_get ();
	#$v->{'cname'} = $r->swig_cname_get ();

	KRISPc::free_search ($r);

	return $v;
}

sub search_key_ex {
	my $self = shift if ref ($_[0]);
	return qw (ip start end size dummy);
}

sub search_ex {
	my $self = shift if ref ($_[0]);
	my ($dbh, $host, $table) = @_;
	my $v = undef;

	my $r = KRISPc::search_ex ($dbh, $host, $table);
	if ( $r->{'err'} ) {
		$_[3] = sprintf "kr_search_ex:: %s", $r->{'err'};
		return undef;
	}

	$v->{'ip'} = $r->{'ip'};
	$v->{'start'} = KRISP::long2ip ($r->{'start'});
	$v->{'end'} = KRISP::long2ip ($r->{'end'});
	$v->{'size'} = $r->{'size'};

	my @p = split ':', $r->{'dummydata'};
	my $i;
	for ( $i=0; $i<@p; $i++ ) {
		$v->{'dummy'}[$i] = $p[$i];
	}

	KRISPc::free_search_ex ($r);

	return $v;
}
# -- joungkyun modificate --
